/**
* Makes the children of flexible containers evenly-spaced.
*/
*[data-flow~="evenly-spaced-children"] { justify-content:space-evenly; }



/**
* Gives an element a flexbox layout.  
* (Uses standard `block`-layout if `flex` is not supported.)
*/
*[data-flow~="flex"] {
	display:block;
	display:-ms-flexbox;
	display:flexbox;
	display:-webkit-flex;
	display:flex;
}



/**
* Gives an element a grid layout.  
* (Uses standard `block`-layout if `grid` is not supported.)
*/
*[data-flow~="grid"] {
	display:block;
	display:-moz-grid;
	display:-ms-grid;
	display:grid;
}



/**
* Makes the flow of flex and grid containers go columnwise.
*/
*[data-flow~="col"] {
	-ms-flex-direction:column;
	flex-direction:column;
	grid-auto-flow:column;
}



/**
* Makes the flow of flex and grid containers go rowwise.
*/
*[data-flow~="row"] {
	-ms-flex-direction:row;
	flex-direction:row;
	grid-auto-flow:row;
}



/**
* Stretches flex-items to fit their container.
*/
*[data-stf] { align-self:stretch; }





*[data-flow~="reverse"][data-flow~="col"] {
	-ms-flex-direction:column-reverse;
	flex-direction:column-reverse;
}



/**
* Makes an element inline and gives it a flexbox layout.  
* (Uses `inline-block` if `inline-flex` is not supported.)
*/
*[data-flow~="inline"][data-flow~="flex"] {
	display:inline-block;
	display:-ms-inline-flexbox;
	display:inline-flexbox;
	display:-webkit-inline-box;
	display:-webkit-inline-flex;
	display:-moz-inline-box;
	display:inline-flex;
}



/**
* Makes an element inline and gives it a grid layout.  
* (Uses `inline-block` if `inline-grid` is not supported.)
*/
*[data-flow~="inline"][data-flow~="grid"] {
	display:inline-block;
	display:-moz-inline-grid;
	display:-ms-inline-grid;
	display:inline-grid;
}



*[data-flow~="reverse"][data-flow~="row"] {
	-ms-flex-direction:row-reverse;
	flex-direction:row-reverse;
}



*[data-flow~="dense"][data-flow~="col"] { grid-auto-flow:column dense; }



*[data-flow~="dense"][data-flow~="row"] { grid-auto-flow:row dense; }